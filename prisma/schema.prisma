// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// 1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
// 2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
// 3. Run prisma db pull to turn your database schema into a Prisma schema.
// 4. Run prisma generate to generate the Prisma Client. You can then start querying your database.
// 5. Tip: Explore how you can extend the ORM with scalable connection pooling, global caching, and real-time database events. Read: https://pris.ly/cli/beyond-orm

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Modello per le Categorie
model Type {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  workouts    Workout[]
}

// Modello per gli Allenamenti
model Workout {
    id                      Int       @id @default(autoincrement())
    name                    String
    elapsed_time            Int       // Durata in minuti
    distance                Float     // Distanza in metri
    total_elevation_gain    Float     // Dislivello positivo complessivo
    sport_type              String
    start_date              DateTime
    start_date_local        DateTime
    timezone                String
    description             String
    calories                Float
    utc_offset              Int?
    start_latlng            Json?
    end_latlng              Json?
    achievement_count       Int?
    kudos_count             Int?
    comment_count           Int?
    athlete_count           Int?
    photo_count             Int?
    map                     Json?
    average_speed           Float?
    max_speed               Float?
    average_cadence         Float?
    average_temp            Int?
    average_watts           Float?
    weighted_average_watts  Float?
    kilojoules              Float?
    max_watts               Float?
    elev_high               Float?
    elev_low                Float?
    workout_type            String?
    suffer_score            Float?

    typeId         Int
    type           Type       @relation(fields: [typeId], references: [id])
  
}


model User {
  id       String   @id @default(uuid()) @db.Uuid
  name     String   @db.VarChar(255)
  email    String   @unique
  password String
}

model Invoice {
  id         String   @id @default(uuid()) @db.Uuid
  customerId String   @db.Uuid
  amount     Int
  status     String   @db.VarChar(255)
  date       DateTime @db.Date
}

model Customer {
  id       String   @id @default(uuid()) @db.Uuid
  name     String   @db.VarChar(255)
  email    String   @db.VarChar(255)
  imageUrl String   @db.VarChar(255)
}

model Revenue {
  month   String @id @db.VarChar(4)
  revenue Int
}